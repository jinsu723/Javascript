day27

1. 전역 객체
1) GrobalThis
	웹 브라우저 환경에서는 window,
	Node.js 환경에서는 global

2) global
	Node.js 환경에서만 사용되는 전역 객체

2. 객체
1) Javascript의 객체
	자바스크립트는 원시 타입값을 제외한 모든 값이 객체
	객체는 프로퍼티와(property)와 메소드(method)로 구성된다
	프로퍼티는 키와 값으로 구성되며 값의 위치에 따라 함수가 올 수 있다
	프로퍼티의 값이 함수인 경우 일반 함수와 구분하기 위해 메소드라고 부른다

2) 객체 생성
	클래스가 없어도 다양한 방법으로 객체를 만들 수 있다
	객체 리터럴을 이용한 생성이다
	객체 리터럴은 {}를 이용하여 표현한다

	let text = {
		num1 : 10,
		num2 : 20,
		name : "길진수",
		sum : function() {
			return this.num1 + this.num2;
		}
	};

3) 객체 사용
	객체의 프로퍼티에 접근하는 방법은 2가지가 있다
	- .을 이용한다
		console.log(test.name);
		console.log(test.sum);
	- []를 이용한다(key를 반드시 ''로 감싸야 한다)
		console.log(test['neme']);

4) 프로퍼티의 생성과 삭제
	객체를 생성하고 이후에 객체 내부에 프로퍼티를 생성하거나 삭제하는 것이 가능하다
	- 생성
		객체에 존재하지 않는 키에 값을 저장한다
		test.num3 = 2.5;

	- 삭제
		delete를 사용한다
		delete test.num3;

3. 생성자 함수와 클래스
1) 생성자 함수
	함수 선언을 통해 생성자를 정의한다
	생성자 함수 내부에서 this 키워드를 사용하여 객체의 프로퍼티를 초기화한다
	new 키워드를 이용하여 생성자 함수를 호출하여 객체를 생성한다

2) 클래스
	class 키워드를 사용하여 클래스를 정의한다
	클래스 내부에 constructor 메소드를 정의하여 객체의 프로퍼티를 초기화한다
	new 키워드를 이용하여 클래스를 호출하여 객체를 생성한다

4. 배열
	자바스크립트의 배열은 배열처럼 보이고 배열처럼 사용하지만 리스트에 가깝다
	배열이 저장하는 값을 요소(element)라고 부르며 요소로 저장하는 값은
	원시타입 뿐만 아니라 객체 타입도 가능하다

1) 배열 생성
- 배열 리터럴 대괄호([])를 사용하는 방법
	초기값 할당
	let ar1 = [1, 2, 3, '가', true];
	배열 크기 지정(쉼표 개수만큼 크기 지정)
	let ar2 = [, , , , ];

- 생성자 함수를 이용하는 방법
	초기값 할당
	let ar4 = new Array(1, 2, 3);
	배열 크기 지정
	let ar3 = new Array(3);  // 요소가 1개이고 숫자인 경우 배열 크기로 사용된다
	

+) 자바에서 빈 배열 생성
	자료형[] 배열명 = {};
	자료형[] 배열명 = new 자료형[칸수];

2) 배열 사용
	대열명[idx];

3) 다차원 배열
	배열 안의 배열을 의미
	다차원 배열을 저장하는 용도로 사용된다
	const matrix = [[1, 2, 3], [4, 5, 6], [7, 8, 9]];

4) 배열에서 사용하는 반복문
- for ... in
	객체의 열거 가능한 속성을 순회할 때 주로 사용
	배열이나 객체의 key값을 순회
	배열에서는 인덱스가 키로 사용되므로 인덱스를 순회하게 된다

- for ... of
	이터러블 객체(반복 가능한 객체, 배열/문자열/Map/Set 등)을 순회할 때 주로 사용
	value(배열의 값)을 순회
	배열의 각 요소(값)을 순서대로 순회한다

5. map() 함수
	배열의 각 요소에대해 주어진 콜백함수를 호출하고 각 요소를 새로운 배열로 매핑 시킨다
	const newArray = array.map(callback(element [, index[, array]][, thisArgs]));

	element : 현재 처리중인 요소의 값
	index : 현재 처리중인 요소의 인덱스(선택)
	array : map()을 호출할 배열(선택)
	thisArgs : callback 함수 내에서 this 키워드가 참조할 객체(선택)

6. filter() 함수
	주어진 콜백함수로 모든 배열 요소를 테스트하고 조건을 충족하는 요소만을 가지고 새로운 배열을 생성한다
	const newArray = array.filter(callback(element [, index[, array]][, thisArgs]));

	element : 현재 처리중인 요소의 값
	index : 현재 처리중인 요소의 인덱스(선택)
	array : filter()을 호출할 배열(선택)
	thisArgs : callback 함수 내에서 this 키워드가 참조할 객체(선택)

7. reduce() 함수
	배열을 순회하면서 하나의 값으로 누적할 때 사용하는 함수
	array.reduce(callback, initialValue);

	callback : 배열의 각 요소에 대해 실행할 함수
	initialValue : 누적 시작값, 첫 번째 호출에서 사용될 값
		(작성하지 않으면 배열의 첫 번째 요수가 initialValue로 사용되고
		두 번째 요소부터 순회가 시작된다)
	accumulator : 누적된 값으로 각 호출에서 callback함수가 반환된 값
	currntValue : 현재 처리중인 요소
	currentIndex : 현재 요소의 인덱스(선택)
	array : reduce()가 호출된 원본 배열(선택)

8. 자바 스크립트 엔진 구조
	싱글 쓰레드(single-thread)기반으로 작동한다
	자바스크립트 엔진은 한 번에 하나의 코드 조각만 실행한다
	동시성(concurrency) 모델을 사용한다

+) 싱슬 쓰레드
	한 번에 하나의 작업만 처리할 수 있는 구조를 의미한다
	자바스크립트 엔진은 단일 쓰레드세어 코드를 실행하며, 동시에 여러 작업을 실행할 수는 없다
	즉, 코드가 순차적으로 실행된다

+) 동시성 모델
	콜 스택(call stack)	: 현재 실행중인 작업
	태스크 큐(Task Queue)	: 비동기 작업의 콜백 함수 대기열
	이벤트 루프(Event Loop)	: 콜 스텍과 태스크 큐를 관리하며 작업을 순차적으로 실행

+) 이벤트 루프의 작동 방식
	콜 스택에 작업이 있는지 확인 : 스택이 비어있지 않으면 현재 작업을 계속 실행
	콜 스택이 비어있으면 : 태스크 큐에서 대기 중인 작업을 가져와서 실행
	비동기 작업 : 태스크 큐에 콜백 함수 형태로 저장

1) 자바스크립트 엔진 구성요소
(1) 콜 스택(call stack)
	함수 호출과 실행 컨텍스트를 관리하는 데이터 구조
	코드 실행 중 호출된 함수가 스택(stack)에 쌓이고 실행이 완료되면 스택에서 제거된다
	* 동작 방식
	함수가 호출되면 스택에 push
	함수 실행이 끝나면 스택에서 pop

(2) 힙(Heap)
	메모리 할당이 이루어지는 영역
	객체와 같은 데이터가 저장된다(비정형)
	자바스크립트 엔진은 힙 메모리를 사용하여 동적으로 데이터를 관리한다

(3) 이벤트 루프(Event Loop)
	자바스크립트의 비동기 작업 처리의 핵심
	콜 스택이 비어있는지 확인하며 비어있다면 대기중인 작업(ex : 콜백함수)을 실행

(4) 큐(Queue)
	비동기 작업(ex : 이벤트 핸들러, 타이머, http 요청 등)의 함수가 대기하는 영역
	대기중인 작업은 FIFO(First-On-Out) 방식으로 처리된다

RAM(메모리)
================
OS Kernel Space
================
stack
	함수 호출
	원시 데이터 
	힙 참조 주소
================
Heap
	객체
	배열
	함수
================
BSS
================
Data 영역
================
Text 영역
================

9. DOM
1) DOM API(Document Object Model APT)
	문서의 객체 모델을 의미
	div, span, input 과 같은 요소들을 모두 DOM 이라고 한다
	HTML 태그들을 하나씩 객체화 한 것을 의미한다
	HTML 페이지 내용과 모양을 제어하기 위해 사용하는 객체이며 HTML 태그 당 DOM 객체가 하나씩 생성된다
	HTML 태그의 포함 관계에 따라 부모, 자식, 형제 관계로 구성된다

2) API(Application Programing Interface)
	소프트웨어 응용프로그램들이 서로 상호작용할 수 있도록 해주는 규칙과 프로토콜의 집합
	API는 서로 다른 소프트웨어 응용프로그램들이 서로 통신할 수 있게 해준다
	응용프로그램 사이에서 동선에 사용되는 언어와 메시지를 의미한다
	API 자원별 구분하는 것을 REST API라고 한다
	* REST API : 웹 서비스에서 주로 사용되는 아키테처 스타일로 HTTP 프로토콜을 통해 데이터를 주고받는다

3) DOM selector 종류
	document.getElementById("id명");  // 단일 객체 반환, HttpCollection
		id 속성에 해당하는 요소 선택

	document.getElementsByClassName("class명");  // HttpCollection
		지정한 클래스 이름을 가진 모든 요소를 선택

	document.getElementsByTagName("Tag명");  // Httpcollection
		 지정한 태그 이름을 가진 모든 요소를 선택

	document.getElementByName("name");  // 유사 배열 객체 반환, NodeList
		지정한 이름을 가진 모든 요소를 선택

	document.querySelector('선택자');  // NodeList
		CSS 선택자 문법을 사용하여 일치하는 첫 번째 요소를 선택

	document.querySelectorAll('선택자');  // NodeList
		CSS 선택자 문법을 사용하여 일치하는 모든 요소 선택

4) HttpCOllection과 NodeList의 차이
- Httpcollection
	특정 조건에 따라 DOM의 요소를 실시간으로 반영하는 동적 컬렉션
	주로 요소 노드(Element Node)만 포함한다
	배열처럼 인덱스로 접근 가능하나 실제 배열은 아니기 때문에 배열 메소드(forEach, map 등)는 사용 불가
	동적으로 업데이트된 상태를 실시간으로 반영해야 하는 경우 적합함

- Node List
	DOM의 특정 조건을 기준으로 만든 정적 리스트이다
	요소 노드 뿐만 아니라 덱스트 노드, 주석 노드 등도 포함될 수 있다
	배열처럼 인덱스로 접근 가능, 일부 배열 메소드(forEach 등) 사용 가능
	DOM의 변경이 많지 않은 경우 정적인 상태에서 요소를 다룰 때 적합함